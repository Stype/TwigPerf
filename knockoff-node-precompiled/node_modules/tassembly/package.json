{
  "name": "tassembly",
  "version": "0.1.3",
  "main": "tassembly.js",
  "devDependencies": {
    "browserify": "*"
  },
  "scripts": {
    "prepublish": "browserify -s tassembly tassembly.js > browser/tassembly.orig.js && [ -x /usr/bin/closure-compiler ] && closure-compiler browser/tassembly.orig.js > browser/tassembly.js"
  },
  "readme": "TAssembly\n=========\n\nJSON\n[IR](https://en.wikipedia.org/wiki/Intermediate_language#Intermediate_representation)\nfor templating and corresponding runtime implementation\n\n**\"Fast but safe\"**\n\nSecurity guarantees of DOM-based templating (tag balancing, context-sensitive\nhref/src/style sanitization etc) with the performance of string-based templating.\n\nSee\n [this page for background.](https://www.mediawiki.org/wiki/Requests_for_comment/HTML_templating_library/Knockout_-_Tassembly)\n\n* The JSON format is compact, can easily be persisted and can be evaluated with\na tiny library.\n\n* Performance is on par with compiled handlebars templates, the fastest\nstring-based library in our tests.\n\n* Compilation target for [Knockoff templates\n  (KnockoutJS syntax)](https://github.com/gwicke/knockoff) and\n  [Spacebars](https://github.com/gwicke/TemplatePerf/tree/master/handlebars-htmljs-node/spacebars-qt).\n\nUsage\n=====\n```javascript\nvar ta = require('tassembly');\n\n// compile a template\nvar tplFun = ta.compile(['<div',['attr',{id:\"m.id\"}],'>',['text','m.body'],'</div>']);\n// call with a model\nvar html = tplFun({id: 'some id', body: 'The body text'});\n```\n\nTAssembly also supports compilation options. \n```javascript\nvar options = {\n    globals: {\n        echo: function(x) {\n            return x;\n        }\n    },\n    partials: {\n        'user': ['<li>'['text','m.userName','</li>']\n    }\n};\n\nvar tpl = ['<ul>',['attr',{id:\"rc.g.echo(m.id)\"}],'>',\n            ['foreach',{data:'m.users',tpl:'user'}],\n            '</ul>'],\n    // compile the template\n    tplFun = ta.compile(tpl, options);\n\n// call with a model\nvar model = {\n    id: 'some id',\n    users: [\n        {\n            userName: 'Paul'\n        }\n    ]\n};\nvar html = tplFun(model);\n```\n\nOptionally, you can also override options at render time:\n\n```javascript\nvar html = tplFun(model, options);\n```\n\nTAssembly spec\n==============\nTAssembly examples:\n\n```javascript\n['<div',['attr',{id:'m.id'}],'>',['text','m.body'],'</div>']\n\n['<div',['attr',{id:'m.id'}],'>',\n      ['foreach',{data:'m.items',tpl:['<div',['attr',{id:'m.key'}],'>',['text','m.val'],'</div>']}],\n'</div>']\n```\n* String content is represented as plain strings\n* Opcodes are represented as a two-element array of the form [opcode, options]\n* Expressions can be used to access the model, parent scopes, globals and so\n  on. Supported are number & string literals, variable references, function\n  calls and array dereferences. The compiler used to generate TAssembly is\n  expected to validate expressions. See the section detailing the model access\n  options and expression format below for further detail.\n\n### text\nEmit text content. HTML-sensitive chars are escaped. Options is a single\nexpression:\n```javascript\n['text','m.textContent']\n```\n\n### foreach\nIterate over an array. The view model 'm' in each iteration is each member of the\narray.\n```javascript\n[\n    \"foreach\",\n    {\n        \"data\": \"m.items\",\n        \"tpl\": [\"<span>\",[\"text\",\"m.key\"],\"</span>\"]\n    }\n]\n```\nYou can pass in the name of a partial instead of the inline template.\n\nThe iteration counter is available as context variable / expression 'i'.\n\n### template\nCalls a template (inline or name of a partial) with a given model.\n```javascript\n['template', { \n    data: 'm.modelExpression', \n    tpl: ['<span>',['text','m.body'],'</span>']\n}]\n```\n\n### with\nCalls a template (inline or name of a partial) with a given model, only if\nthat model is truish.\n```javascript\n['with', { \n    data: 'm.modelExpression', \n    tpl: ['<span>',['text','m.body'],'</span>']\n}]\n```\n### if\nCalls a template (inline or name of a partial) if a condition is true.\n```javascript\n['if', { \n    data: 'm.conditionExpression', \n    tpl: ['<span>',['text','m.body'],'</span>']\n}]\n```\n### ifnot\nCalls a template (inline or name of a partial) if a condition is false.\n```javascript\n['if', { \n    data: 'm.conditionExpression', \n    tpl: ['<span>',['text','m.body'],'</span>']\n}]\n```\n### attr\nEmit one or more HTML attributes. Automatic context-sensitive escaping is\napplied to href, src and style attributes. \n\nOptions is an object of attribute name -> value pairs:\n```javascript\n{ id: \"m.idAttrVal\", title: \"m.titleAttrVal\" }\n```\nAttributes whose value is null are skipped. The value can also be an object:\n```javascript\n{\n    \"style\": {\n        \"v\": \"m.value\",\n            \"app\": [\n            {\n                \"ifnot\": \"m.obj\",\n                \"v\": \"display: none !important;\"\n            }\n        ]\n    }\n}\n```\nIn this case, the style attribute will have the values \"color:red;\" or\n\"color:red;display:none !important\" depending on the value of the variable\n'obj' in the current view model.\n\n\nModel access and expressions\n----------------------------\n* Literals: \n  * Number \"2\" or \"3.4\"\n  * String \"'Some string literal'\" (note single quotes); single quotes escaped\n    with \"\\'\" & backslashes escaped as \"\\\\\"\n  * Object \"{foo:'bar',baz:m.someVar}\"\n* Variable access with dot notation: 'm.foo.bar'\n* Array references: \"m.users[m.user]\"\n* Function calls: \"rc.g.i18n('username',{foo:m.bar})\"; nesting and multiple\n  parameters supported\n\nExpressions have access to a handful of variables defined in the current\ncontext:\n* m - current view model (Knockout: '$data')\n* rm - root (topmost) view model (Knockout: '$root')\n* pm - parent view model (Knockout: '$parent')\n* pms - array of parent view models (Knockout: '$parents')\n* pc - parent context object (Knockout: '$parentContext')\n* i - current iteration index in foreach (Knockout: '$index')\n* rc - root context object\n* rc.g - globals defined at compile time; typically used for helper functions\n  which should not be part of the model (i18n etc)\n",
  "readmeFilename": "README.md",
  "description": "TAssembly =========",
  "_id": "tassembly@0.1.3",
  "_from": "tassembly@x.x.x"
}
