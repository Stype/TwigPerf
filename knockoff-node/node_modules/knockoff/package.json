{
  "name": "knockoff",
  "version": "0.1.3",
  "main": "knockoff.js",
  "dependencies": {
    "tassembly": "git+https://github.com/gwicke/tassembly.git#master",
    "domino": "1.x.x"
  },
  "devDependencies": {
    "pegjs": "~0.8.0"
  },
  "scripts": {
    "prepublish": "node makeKnockoutExpressionParser.js",
    "test": "node test"
  },
  "readme": "KnockOff\n========\n\n[KnockoutJS](http://knockoutjs.com/) to [TAssembly](https://github.com/gwicke/tassembly) compiler.\n\n- Compiles a basic subset of KnockoutJS functionality to TAssembly, a\n  simple JSON-based intermediate template representation.\n- Builds a HTML5 DOM internally, ensures proper nesting.\n- TAssembly performs context-sensitive escaping of all user-provided data.\n- The overall solution is the fastest JS templating library [in our\n  micro-benchmarks](https://github.com/gwicke/TemplatePerf/blob/master/results.txt),\n  but yet provides the security benefits of much more expensive DOM templating\n  libraries.\n\n\n## Usage\n\nSimple example:\n```javascript\nvar ko = require('knockoff');\n\nvar template = ko.compile('<div data-bind=\"attr:{id:id}, text: body\"></div>'),\n    model = {\n\tid: \"myId\",\n\tbody: \"some text\"\n    };\n\nconsole.log( template( model ) );\n```\n\nCompile to [TAssembly](https://github.com/gwicke/tassembly) for later execution:\n```javascript\nvar ko = require('knockoff');\n\nvar tassemblyTemplate = ko.compile(\n\t'<div data-bind=\"attr:{id:id}, text: body\"></div>',\n\t{ toTAssembly: true }\n    );\n// [\"<div\",[\"attr\",{\"id\":\"m.id\"}],\">\",[\"text\",\"m.body\"],\"</div>\"]\nconsole.log( JSON.stringify( tassemblyTemplate) );\n```\n\nCompile all the way to a function, and pass in [TAssembly compilation\noptions](https://github.com/gwicke/tassembly/blob/master/README.md#usage):\n```javascript\nvar ko = require('knockoff');\n\nvar options = {\n    // Define globals accessible as $.* in any scope\n    globals: {\n        echo: function(x) {\n            return x;\n        }\n    },\n    // Define partial templates.\n    // This one uses the global echo function defined above.\n    partials: {\n        userTpl: '<span data-bind=\"text: $.echo(name)\"></span>'\n    }\n};\n\n// Our simple template using KnockOut syntax, and referencing the partial\nvar templateString = '<div data-bind=\"template: { name: \\'userTpl\\', data: user }\"></div>';\n\n// Now compile the template & options into a function.\n// Uses TAssembly internally, use toTAssembly option for TAssembly output.\nvar templateFn = ko.compile(templateString, options);\n\n// A simple model object\nvar model = {\n    user: { name: \"Foo\" }\n};\n\n// Now execute the template with the model.\n// Prints: <div><span>Foo</span></div>\nconsole.log( templateFn( model ) );\n```\n\nPartials are expected to be in KnockOff syntax, and will be compiled to\nTAssembly automatically.\n\n\nKnockOff spec\n=============\n\nKnockOff supports a subset of [KnockOut](http://knockoutjs.com/documentation/introduction.html) functionality. The biggest differences are:\n\n- No reactivity. KnockOff aims for speed and one-shot operation.\n\n- Limited expression syntax. KnockOut supports arbitrary JS, while we restrict\n  ourselves to literals (including objects), model access and function calls.\n  The usual KnockOut model accessors are supported. In addition, a global\n  ```$``` object is defined, which can be populated with the ```globals```\n  compile time option.\n\n\n### text\nEmit text content. HTML-sensitive chars are escaped. Options is a single\nexpression:\n```html\n<div data=bind=\"text: textContent\"></div>\n```\nSee also [the KnockOut docs for ```text```](http://knockoutjs.com/documentation/text-binding.html).\n\n### foreach\nIterate over an array. The view model '$data' in each iteration is each member of the\narray.\n```html\n<ul data-bind=\"foreach: links\">\n    <li data-bind=\"text: $data\"></li>\n</ul>\n```\n\nIf each array element is an object, its members will be directly accessible\nin the loop's view model:\n\n```html\n<ul data-bind=\"foreach: people\">\n    <li><a data-bind=\"attr: { href: homepageURL }, text: name\"></a></li>\n</ul>\n```\nYou can pass in the name of a partial instead of the inline template.\n\n```$index```, ```$parent``` and other context properties work just like [in\nKnockOut](http://knockoutjs.com/documentation/foreach-binding.html).\n\nSee also [the KnockOut docs for ```foreach```](http://knockoutjs.com/documentation/foreach-binding.html).\n\n### template\nCalls a template (inline or name of a partial) with a given model.\n```html\n<div data-bind=\"template: { name: 'person-template', data: buyer }\"></div>\n```\nSee also [the KnockOut docs for ```template```](http://knockoutjs.com/documentation/template-binding.html).\n\n### with\nThe with binding creates a new binding context, so that descendant elements\nare bound in the context of a specified object. It evaluates a nested block\n```iff``` the model object is truish.\n```html\n<div data-bind=\"with: person\">\n    <span data-bind=\"text: firstName\"></span>\n    <span data-bind=\"text: lastName\"></span>\n</div>\n```\nSee also [the KnockOut docs for ```with```](http://knockoutjs.com/documentation/with-binding.html).\n\n### if\nEvaluates a block or template if an expression is true.\n```html\n<div data-bind=\"if: displayMessage\">Here is a message. Astonishing.</div>\n```\nSee also [the KnockOut docs for ```if```](http://knockoutjs.com/documentation/if-binding.html).\n\n### ifnot\nEvaluates a block or template if an expression is false.\n```html\n<div data-bind=\"ifnot: displayMessage\">No message to display.</div>\n```\nSee also [the KnockOut docs for ```ifnot```](http://knockoutjs.com/documentation/ifnot-binding.html).\n\n### attr\nEmit one or more HTML attributes. Automatic context-sensitive escaping is\napplied to href, src and style attributes. \n\n```html\n<a data-bind=\"attr: { href: url, title: details }\">\n    Report\n</a>\n```\nSee also [the KnockOut docs for ```attr```](http://knockoutjs.com/documentation/attr-binding.html).\n\n### visible\nHides a block using CSS if the condition is falsy.\n\n```html\n<div data-bind=\"visible: shouldShowMessage\">\n    You will see this message only when \"shouldShowMessage\" holds a true value.\n</div>\n```\n\nCurrently this uses ```display: none !important;``` inline, but we could also\nadd a class instead. Let us know which you prefer.\n\nSee also [the KnockOut docs for ```visible```](http://knockoutjs.com/documentation/visible-binding.html).\n\n### Virtual elements / container-less syntax\nYou can use Knockout's comment syntax to apply *control flow bindings* (`if`,\n`ifnot`, `foreach`, `with`) to arbitrary content outside of elements:\n\n```html\n<ul>\n    <li>This item always appears</li>\n    <!-- ko if: someExpressionGoesHere -->\n        <li>I want to make this item present/absent dynamically</li>\n    <!-- /ko -->\n</ul>\n```\nSee also [the KnockOut docs for\n```if```](http://knockoutjs.com/documentation/if-binding.html) and other\ncontrol flow bindings.\n\nModel access and expressions\n----------------------------\nKnockOff supports a restricted set of simple JS expressions. These are a\nsubset of KnockOut's arbitrary JS. A KnockOff expression will normally also be\na valid KnockOut expression.\n\n* Literals: \n  * Number ```2``` or ```3.4```\n  * Quoted string ```'Some string literal'```\n  * Object ```{foo: 'bar', baz: someVar}```\n* Variable access with dot notation: ```foo.bar```\n* Array references: ```users[user]```\n* Function calls: ```$.i18n('username', {foo: bar} )```; nesting and multiple\n  parameters supported\n\nExpressions have access to a handful of variables defined in the current\ncontext:\n* ```$data``` - current view model\n* ```$root``` - root (topmost) view model\n* ```$parent``` - parent view model\n* ```$parents``` - array of parent view models\n* ```$parentContext``` - parent context object\n* ```$index``` - current iteration index in foreach\n* ```$``` - globals defined at compile time; typically used for helper functions\n  which should not be part of the model (i18n etc). This is an extension over\n  KnockOut, which can be replicated there using [expression\n  rewriting](http://knockoutjs.com/documentation/binding-preprocessing.html).\n",
  "readmeFilename": "README.md",
  "description": "KnockOff ========",
  "_id": "knockoff@0.1.3",
  "_from": "knockoff@x.x.x"
}
